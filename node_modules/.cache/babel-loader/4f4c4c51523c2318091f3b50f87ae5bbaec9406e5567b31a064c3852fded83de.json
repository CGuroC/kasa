{"ast":null,"code":"var _jsxFileName = \"/Users/natacharippert/Desktop/P5_Kasa/src/components/Slideshow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../css/pages/slideshow.css\";\nimport imageFlecheD from \"../assets/FlecheD.png\";\nimport imageFlecheG from \"../assets/FlecheG.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Slideshow = ({\n  images\n}) => {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const totalImages = images.length;\n\n  // Aller à l'image suivante\n  const nextSlide = () => {\n    setCurrentIndex(prevIndex => prevIndex === totalImages - 1 ? 0 : prevIndex + 1);\n  };\n\n  // Revenir à l'image précédente\n  const prevSlide = () => {\n    setCurrentIndex(prevIndex => prevIndex === 0 ? totalImages - 1 : prevIndex - 1);\n  };\n\n  // Vérification si on a une seule image\n  const isSingleImage = totalImages === 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slideshow\",\n    children: [images.map((image, index) => {\n      let className = \"slideshow-image\";\n      if (index === currentIndex) {\n        className += \" active\"; // Image active (centrée)\n      } else if (index === (currentIndex - 1 + totalImages) % totalImages) {\n        className += \" prev\"; // Image précédente (part vers la gauche)\n      }\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: `Slide ${index + 1}`,\n        className: className\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    }), !isSingleImage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prev\",\n        onClick: prevSlide,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageFlecheG,\n          alt: \"Pr\\xE9c\\xE9dent\",\n          className: \"arrow-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextSlide,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageFlecheD,\n          alt: \"Suivant\",\n          className: \"arrow-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !isSingleImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slideshow-counter\",\n      children: [currentIndex + 1, \"/\", totalImages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Slideshow, \"tusBbsahUVevXfyh6oH5R6YDC9Q=\");\n_c = Slideshow;\nexport default Slideshow;\nvar _c;\n$RefreshReg$(_c, \"Slideshow\");","map":{"version":3,"names":["React","useState","imageFlecheD","imageFlecheG","jsxDEV","_jsxDEV","Fragment","_Fragment","Slideshow","images","_s","currentIndex","setCurrentIndex","totalImages","length","nextSlide","prevIndex","prevSlide","isSingleImage","className","children","map","image","index","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/natacharippert/Desktop/P5_Kasa/src/components/Slideshow.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../css/pages/slideshow.css\";\nimport imageFlecheD from \"../assets/FlecheD.png\";\nimport imageFlecheG from \"../assets/FlecheG.png\";\n\nconst Slideshow = ({ images }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const totalImages = images.length;\n\n  // Aller à l'image suivante\n  const nextSlide = () => {\n    setCurrentIndex((prevIndex) =>\n      prevIndex === totalImages - 1 ? 0 : prevIndex + 1\n    );\n  };\n\n  // Revenir à l'image précédente\n  const prevSlide = () => {\n    setCurrentIndex((prevIndex) =>\n      prevIndex === 0 ? totalImages - 1 : prevIndex - 1\n    );\n  };\n\n  // Vérification si on a une seule image\n  const isSingleImage = totalImages === 1;\n\n  return (\n    <div className=\"slideshow\">\n      {/* Affichage de toutes les images avec des classes conditionnelles */}\n      {images.map((image, index) => {\n        let className = \"slideshow-image\";\n\n        if (index === currentIndex) {\n          className += \" active\"; // Image active (centrée)\n        } else if (index === (currentIndex - 1 + totalImages) % totalImages) {\n          className += \" prev\"; // Image précédente (part vers la gauche)\n        }\n\n        return (\n          <img\n            key={index}\n            src={image}\n            alt={`Slide ${index + 1}`}\n            className={className}\n          />\n        );\n      })}\n\n      {/* Affichage des flèches seulement si plusieurs images */}\n      {!isSingleImage && (\n        <>\n          <button className=\"prev\" onClick={prevSlide}>\n            <img src={imageFlecheG} alt=\"Précédent\" className=\"arrow-icon\" />\n          </button>\n\n          <button className=\"next\" onClick={nextSlide}>\n            <img src={imageFlecheD} alt=\"Suivant\" className=\"arrow-icon\" />\n          </button>\n        </>\n      )}\n\n      {/* Affichage de la numérotation seulement si plusieurs images */}\n      {!isSingleImage && (\n        <div className=\"slideshow-counter\">\n          {currentIndex + 1}/{totalImages}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Slideshow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}